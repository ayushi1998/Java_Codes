import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
class Reader{
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}
public class Solution {

    // Complete the isValid function below.
    static String isValid(String s) {
        int[] l=new int[27];

        for(int i=0;i<s.length();i++)
        {
            char c=s.charAt(i);
            l[(int) c -97]+=1;
            
        }
        Arrays.sort(l);
        HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
        
        for(int i=0;i<27;i++)
        {
            if(!hm.containsKey(l[i]))
            {
                hm.put(l[i],1);
            }
            else{
                hm.put(l[i],hm.get(l[i])+1);
            }
        }
        System.out.println(hm.size());
        for(Integer i: hm.keySet()){
            
            System.out.println(i+"LI");
        }
        if(hm.size()==2)
        {
            int[] l1=new int[2];
            int j=0;
            for(Integer i: hm.keySet()){
                l1[j]=i;
                System.out.println(l1[j]+"LI");
                j++;
                
            }
            
            if( (hm.get(l1[1])==1 || hm.get(l1[0])==1 )& (Math.abs(l1[1]-l1[0])==1))
            {
                return ("YES");
            }
            else{
                return ("NO");
            }
        }
        else{
            if(hm.size()==1){
                return ("YES");
            }
            
            else{
                return ("NO");
            }
                
            }
        
        
  
        


    
}

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
    	 Reader.init(System.in);
    	String s=Reader.next();
    	String result = isValid(s);
    	System.out.println(result);
    	
    	 
    	 
    	 
    }
}
